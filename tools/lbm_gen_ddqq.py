"""
Generate direction vector definition for CUDA
"""
import sys

from ddqq import ei, d3q27_weights, d3q19_weights, d3q7_weights
from code_printer import AnyFile

src = AnyFile()
src.header(f'// Generated by {sys.argv[0]}')
src.include('DdQq.hpp')


def d3q27_vec(i, vector3=False):
    header = ''
    if i == 0:
        header += '// Origin\n'
    elif i == 1:
        header += '// 6 faces\n'
    elif i == 7:
        header += '// 12 edges\n'
    elif i == 19:
        header += '// 8 corners\n'
    if i < 26:
        if vector3:
            return header + f'Vector3<int>({ei.row(i)[0]}, {ei.row(i)[1]}, {ei.row(i)[2]}),  // {i}'
        else:
            return header + f'{ei.row(i)[0]}, {ei.row(i)[1]}, {ei.row(i)[2]},  // {i}'
    else:
        if vector3:
            return header + f'Vector3<int>({ei.row(i)[0]}, {ei.row(i)[1]}, {ei.row(i)[2]})  // {i}'
        else:
            return header + f'{ei.row(i)[0]}, {ei.row(i)[1]}, {ei.row(i)[2]}  // {i}'


src.comment('Direction vectors for host usage')
src.append('\n'.join(['const Vector3<int> D3Q27vectors[27] = {']
                     + [d3q27_vec(i, vector3=True) for i in range(0, 27)]
                     + ['};']))

src.comment('Direction vectors for CUDA usage')
src.append('\n'.join(['__constant__ int D3Q27[81] = {']
                     + [d3q27_vec(i, vector3=False) for i in range(0, 27)]
                     + ['};']))

# Indices sorted by positive/negative axis
px = []
nx = []
py = []
ny = []
pz = []
nz = []
for i in range(0, 27):
    if ei.row(i)[0] == 1:
        px += [str(i)]
    if ei.row(i)[0] == -1:
        nx += [str(i)]
    if ei.row(i)[1] == 1:
        py += [str(i)]
    if ei.row(i)[1] == -1:
        ny += [str(i)]
    if ei.row(i)[2] == 1:
        pz += [str(i)]
    if ei.row(i)[2] == -1:
        nz += [str(i)]
src.comment('Vector index table for ghost layer exchange ordering')
src.append('\n'.join(['const unsigned int D3Q27ranks[7][9] = {'] \
    + ['{0, 0, 0, 0, 0, 0, 0, 0, 0}, // padding'] \
    + ['{' + ','.join(px) + '}, // positive x-axis'] \
    + ['{' + ','.join(nx) + '}, // negative x-axis'] \
    + ['{' + ','.join(py) + '}, // positive y-axis'] \
    + ['{' + ','.join(ny) + '}, // negative y-axis'] \
    + ['{' + ','.join(pz) + '}, // positive z-axis'] \
    + ['{' + ','.join(nz) + '} // negative z-axis'] \
    + ['};']))

src.comment('Opposing vector ordering')
opp = []
for i in range(0, 27):
    eiv = ei.row(i)
    for j in range(0, 27):
        eiu = ei.row(j)
        if eiv == -eiu:
            opp += [str(j)]
src.append('\n'.join( ['__constant__ unsigned int D3Q27Opposite[27] = {'] \
    + [', '.join(opp)] \
    + ['};']))

src.comment('D3Q27 lattice weights')
src.append('\n'.join([
    '__constant__ real_t D3Q27weights[27] = {'] \
    + [', '.join([str(d3q27_weights.row(i)[0]) for i in range(0, 27)])] \
    + ['};']))

src.comment('D3Q19 lattice weights')
src.append('\n'.join(['__constant__ real_t D3Q19weights[19] = {'] \
    + [', '.join([str(d3q19_weights.row(i)[0]) for i in range(0, 19)])] \
    + ['};']))

src.comment('D3Q7 lattice weights')
src.append('\n'.join( ['__constant__ real_t D3Q7weights[7] = {'] \
    + [', '.join([str(d3q7_weights.row(i)[0]) for i in range(0, 7)])] \
    + ['};']))

src.generate(sys.argv)

